// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Chat;

public final class RoomPrxHelper extends Ice.ObjectPrxHelperBase implements RoomPrx
{
    private static final String __login_name = "login";

    public boolean login(String user, CMDReceiverPrx receiver)
    {
        return login(user, receiver, null, false);
    }

    public boolean login(String user, CMDReceiverPrx receiver, java.util.Map<String, String> __ctx)
    {
        return login(user, receiver, __ctx, true);
    }

    private boolean login(String user, CMDReceiverPrx receiver, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__login_name);
        return end_login(begin_login(user, receiver, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver)
    {
        return begin_login(user, receiver, null, false, false, null);
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver, java.util.Map<String, String> __ctx)
    {
        return begin_login(user, receiver, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver, Ice.Callback __cb)
    {
        return begin_login(user, receiver, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(user, receiver, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver, Callback_Room_login __cb)
    {
        return begin_login(user, receiver, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(String user, CMDReceiverPrx receiver, java.util.Map<String, String> __ctx, Callback_Room_login __cb)
    {
        return begin_login(user, receiver, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(String user, 
                                       CMDReceiverPrx receiver, 
                                       IceInternal.Functional_BoolCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(user, receiver, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(String user, 
                                       CMDReceiverPrx receiver, 
                                       IceInternal.Functional_BoolCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(user, receiver, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_login(String user, 
                                       CMDReceiverPrx receiver, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_BoolCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(user, receiver, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(String user, 
                                       CMDReceiverPrx receiver, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_BoolCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(user, receiver, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_login(String user, 
                                        CMDReceiverPrx receiver, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_BoolCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(user, receiver, __ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       RoomPrxHelper.__login_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_login(String user, 
                                        CMDReceiverPrx receiver, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__login_name, __cb);
        try
        {
            __result.prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(user);
            CMDReceiverPrxHelper.__write(__os, receiver);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_login(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __login_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __login_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        Chat.RoomPrx __proxy = (Chat.RoomPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_login(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __logout_name = "logout";

    public void logout(String user)
    {
        logout(user, null, false);
    }

    public void logout(String user, java.util.Map<String, String> __ctx)
    {
        logout(user, __ctx, true);
    }

    private void logout(String user, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_logout(begin_logout(user, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_logout(String user)
    {
        return begin_logout(user, null, false, false, null);
    }

    public Ice.AsyncResult begin_logout(String user, java.util.Map<String, String> __ctx)
    {
        return begin_logout(user, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_logout(String user, Ice.Callback __cb)
    {
        return begin_logout(user, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String user, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logout(user, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String user, Callback_Room_logout __cb)
    {
        return begin_logout(user, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String user, java.util.Map<String, String> __ctx, Callback_Room_logout __cb)
    {
        return begin_logout(user, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String user, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(user, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(String user, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(user, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_logout(String user, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(user, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(String user, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(user, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_logout(String user, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(user, 
                            __ctx, 
                            __explicitCtx, 
                            __synchronous, 
                            new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_logout(String user, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__logout_name, __cb);
        try
        {
            __result.prepare(__logout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(user);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_logout(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __logout_name);
    }

    private static final String __sendCMD_name = "sendCMD";

    public void sendCMD(String user, String CMD)
    {
        sendCMD(user, CMD, null, false);
    }

    public void sendCMD(String user, String CMD, java.util.Map<String, String> __ctx)
    {
        sendCMD(user, CMD, __ctx, true);
    }

    private void sendCMD(String user, String CMD, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_sendCMD(begin_sendCMD(user, CMD, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD)
    {
        return begin_sendCMD(user, CMD, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD, java.util.Map<String, String> __ctx)
    {
        return begin_sendCMD(user, CMD, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD, Ice.Callback __cb)
    {
        return begin_sendCMD(user, CMD, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendCMD(user, CMD, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD, Callback_Room_sendCMD __cb)
    {
        return begin_sendCMD(user, CMD, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendCMD(String user, String CMD, java.util.Map<String, String> __ctx, Callback_Room_sendCMD __cb)
    {
        return begin_sendCMD(user, CMD, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendCMD(String user, 
                                         String CMD, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendCMD(user, CMD, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendCMD(String user, 
                                         String CMD, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendCMD(user, CMD, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendCMD(String user, 
                                         String CMD, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendCMD(user, CMD, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendCMD(String user, 
                                         String CMD, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendCMD(user, CMD, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendCMD(String user, 
                                          String CMD, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendCMD(user, 
                             CMD, 
                             __ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_sendCMD(String user, 
                                          String CMD, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendCMD_name, __cb);
        try
        {
            __result.prepare(__sendCMD_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(user);
            __os.writeString(CMD);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_sendCMD(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __sendCMD_name);
    }

    public static RoomPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), RoomPrx.class, RoomPrxHelper.class);
    }

    public static RoomPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), RoomPrx.class, RoomPrxHelper.class);
    }

    public static RoomPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), RoomPrx.class, RoomPrxHelper.class);
    }

    public static RoomPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), RoomPrx.class, RoomPrxHelper.class);
    }

    public static RoomPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, RoomPrx.class, RoomPrxHelper.class);
    }

    public static RoomPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, RoomPrx.class, RoomPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Chat::Room",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, RoomPrx v)
    {
        __os.writeProxy(v);
    }

    public static RoomPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RoomPrxHelper result = new RoomPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
